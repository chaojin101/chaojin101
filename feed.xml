<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://chaojin101.github.io/</id><title>CJ</title><subtitle>chaojin101 CJ blog</subtitle> <updated>2024-08-10T18:52:36+00:00</updated> <author> <name>CJ</name> <uri>https://chaojin101.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://chaojin101.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://chaojin101.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 CJ </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Web service worker</title><link href="https://chaojin101.github.io/posts/web-service-worker/" rel="alternate" type="text/html" title="Web service worker" /><published>2023-07-24T00:00:00+00:00</published> <updated>2023-07-24T03:51:34+00:00</updated> <id>https://chaojin101.github.io/posts/web-service-worker/</id> <content src="https://chaojin101.github.io/posts/web-service-worker/" /> <author> <name>CJ</name> </author> <summary> This is a note for MDN web service worker. I will clarity some concepts and add some examples. Clarify skipWaiting() and clients.claim() skipWaiting() skipWaiting() is used in the install event of service worker. It will force the service worker to be activated immediately, instead of waiting for all the pages controlled by the old version of the service worker to be closed. MDN link: skipW... </summary> </entry> <entry><title>Linux regular cmd</title><link href="https://chaojin101.github.io/posts/linux-regular-cmd/" rel="alternate" type="text/html" title="Linux regular cmd" /><published>2023-07-24T00:00:00+00:00</published> <updated>2023-07-24T00:00:00+00:00</updated> <id>https://chaojin101.github.io/posts/linux-regular-cmd/</id> <content src="https://chaojin101.github.io/posts/linux-regular-cmd/" /> <author> <name>CJ</name> </author> <summary> ps aux ps aux is a command to list all the processes running on the system. lsof -i:port lsof -i:port is a command to list all the processes that are using the port. nohup command &amp;amp; nohup command &amp;amp; is a command to run the command in the background. </summary> </entry> <entry><title>Postgres init setup</title><link href="https://chaojin101.github.io/posts/Postgres-init-setup/" rel="alternate" type="text/html" title="Postgres init setup" /><published>2023-07-09T00:00:00+00:00</published> <updated>2023-07-09T04:06:10+00:00</updated> <id>https://chaojin101.github.io/posts/Postgres-init-setup/</id> <content src="https://chaojin101.github.io/posts/Postgres-init-setup/" /> <author> <name>CJ</name> </author> <summary> Install postgres apt update apt upgrade -y apt install postgresql postgresql-contrib -y Set password for postgres user switch to postgres user su - postgres enter postgres shell psql set password for postgres user \password postgres Postgres config file vim /etc/postgresql/14/main/postgresql.conf vim /etc/postgresql/14/main/pg_hba.conf after editing, restart postgres systemctl ... </summary> </entry> <entry><title>How to use nginx to setup https with certbot and let's encrypt</title><link href="https://chaojin101.github.io/posts/How-to-use-nginx-to-setup-https-with-certbot-and-letsencrypt/" rel="alternate" type="text/html" title="How to use nginx to setup https with certbot and let's encrypt" /><published>2023-07-09T00:00:00+00:00</published> <updated>2023-08-11T12:12:53+00:00</updated> <id>https://chaojin101.github.io/posts/How-to-use-nginx-to-setup-https-with-certbot-and-letsencrypt/</id> <content src="https://chaojin101.github.io/posts/How-to-use-nginx-to-setup-https-with-certbot-and-letsencrypt/" /> <author> <name>CJ</name> </author> <category term="howto" /> <summary> Install nginx sudo apt update sudo apt upgrade -y sudo apt install nginx -y press ‘Enter’ if it prompts to restart some program. Install certbot I’m in Ubuntu 20.04, so I use snap to install certbot. certbot official instuctions sudo snap install core; sudo snap refresh core sudo snap install --classic certbot Run certbot sudo certbot --nginx follow the instructions it prompts you. ... </summary> </entry> <entry><title>How to set a simple reverse proxy with nginx</title><link href="https://chaojin101.github.io/posts/How-to-set-a-simple-reverse-proxy-with-nginx/" rel="alternate" type="text/html" title="How to set a simple reverse proxy with nginx" /><published>2023-07-09T00:00:00+00:00</published> <updated>2023-07-09T04:06:10+00:00</updated> <id>https://chaojin101.github.io/posts/How-to-set-a-simple-reverse-proxy-with-nginx/</id> <content src="https://chaojin101.github.io/posts/How-to-set-a-simple-reverse-proxy-with-nginx/" /> <author> <name>CJ</name> </author> <category term="howto" /> <summary> Add a new server block sudo vim /etc/nginx/sites-enabled/yourdomain.com Add the following content server { listen 80; listen [::]:80 server_name yourdomain.com; # or _ if you want to listen to all domains location / { proxy_pass http://localhost:3000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; } } </summary> </entry> </feed>
